load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@with_cfg.bzl", "original_settings")
load(":cc_asan_test.bzl", "cc_asan_test", "cc_asan_test_reset")

cc_asan_test(
    name = "asan_test",
    srcs = ["asan_test.cpp"],
    env = {
        # Effectively invert the exit code so that the test passes if and only
        # if the expected ASAN error is detected.
        "ASAN_OPTIONS": "exitcode=0:abort_on_error=0",
    },
    deps = [
        ":lib",
    ],
)

cc_library(
    name = "lib",
    srcs = ["lib.cpp"],
    hdrs = ["lib.h"],
    deps = [":large_dep_reset"],
)

# This ensures that the "large" third-party dependency is built with the
# original top-level settings, that is, without AddressSanitizer.
cc_asan_test_reset(
    name = "large_dep_reset",
    exports = "//cc_asan_test_with_manual_reset/third_party:large_dep",
)

original_settings(
    name = "cc_asan_test_original_settings",
)
